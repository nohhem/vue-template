{"remainingRequest":"/Users/noh/Learn/Vue/vue-template/node_modules/babel-loader/lib/index.js!/Users/noh/Learn/Vue/vue-template/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/noh/Learn/Vue/vue-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/noh/Learn/Vue/vue-template/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/noh/Learn/Vue/vue-template/src/App.vue","mtime":1564483313000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\nimport HelloWorld from \"./components/HelloWorld\";\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld\n  }\n};\nconsole.log(\"Running JavaScript!\");\n/**\n * Create HTTP server.\n */\n\nvar http = require('http');\n\nvar port = process.env.PORT || 3000;\napp.set('port', port);\nvar server = http.createServer(app);\nserver.listen(port);\n/**\n * Create IO connection\n */\n\nconsole.log(\"Running JavaScript!1\");\n\nvar io = require('socket.io').listen(server);\n/**\n * Create SerialPort connection\n */\n\n\nconsole.log(\"Running JavaScript!2\");\n\nvar SerialPort = require(\"serialport\").SerialPort; // creates a new serial port connection, in this case to port COM5\n// Windows users: to find out which port is used, go to: Device Manager -> Ports (COM & LPT)\n\n\nvar serialPort = new SerialPort(\"COM5\", {\n  baudrate: 9600\n}, false); // this is the openImmediately flag [default is true]\n\nserialPort.open(function (error) {\n  if (error) {\n    console.log('failed to open: ' + error);\n  } else {\n    console.log('serial port opened');\n    serialport_opened = true; // get data from connected device via serial port\n\n    serialPort.on('data', function (data) {\n      // get buffered data and parse it to an utf-8 string\n      data = data.toString('utf-8'); // you could for example, send this data now to the the client via socket.io\n      // io.emit('emit_data', data);\n    });\n    serialPort.on('error', function (data) {\n      console.log('Error: ' + data);\n    });\n  }\n}); // sends data to the connected device via serial port\n\nfunction writeAndDrain(data, callback) {\n  // flush data received but not read\n  serialPort.flush(); // write/send data to serial port\n\n  serialPort.write(data, function (error) {\n    if (error) {\n      console.log(error);\n    } else {\n      // waits until all output data has been transmitted to the serial port.\n      serialPort.drain(callback);\n    }\n  });\n}\n\nio.on('connection', function (socket) {\n  console.log('user connected');\n  socket.on('disconnect', function () {\n    console.log('user disconnected');\n  });\n  socket.on('get_data', function (data) {\n    // send data to the connected device via serial port\n    writeAndDrain(data, null);\n  });\n});",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;AAQA,OAAA,UAAA,MAAA,yBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA;AAFA,CAAA;AAMA,OAAA,CAAA,GAAA,CAAA,qBAAA;AACA;;;;AAIA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,GAAA,CAAA,IAAA,IAAA,IAAA;AACA,GAAA,CAAA,GAAA,CAAA,MAAA,EAAA,IAAA;AACA,IAAA,MAAA,GAAA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAA;AACA,MAAA,CAAA,MAAA,CAAA,IAAA;AAEA;;;;AAGA,OAAA,CAAA,GAAA,CAAA,sBAAA;;AACA,IAAA,EAAA,GAAA,OAAA,CAAA,WAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AAGA;;;;;AAGA,OAAA,CAAA,GAAA,CAAA,sBAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA,CAAA,UAAA,C,CAEA;AACA;;;AACA,IAAA,UAAA,GAAA,IAAA,UAAA,CAAA,MAAA,EAAA;AACA,EAAA,QAAA,EAAA;AADA,CAAA,EAEA,KAFA,CAAA,C,CAEA;;AAGA,UAAA,CAAA,IAAA,CAAA,UAAA,KAAA,EAAA;AACA,MAAA,KAAA,EAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,qBAAA,KAAA;AACA,GAFA,MAEA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,oBAAA;AACA,IAAA,iBAAA,GAAA,IAAA,CAFA,CAIA;;AACA,IAAA,UAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,IAAA,EAAA;AACA;AACA,MAAA,IAAA,GAAA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAFA,CAGA;AACA;AACA,KALA;AAOA,IAAA,UAAA,CAAA,EAAA,CAAA,OAAA,EAAA,UAAA,IAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA,IAAA;AACA,KAFA;AAGA;AACA,CAnBA,E,CAqBA;;AACA,SAAA,aAAA,CAAA,IAAA,EAAA,QAAA,EAAA;AACA;AACA,EAAA,UAAA,CAAA,KAAA,GAFA,CAIA;;AACA,EAAA,UAAA,CAAA,KAAA,CAAA,IAAA,EAAA,UAAA,KAAA,EAAA;AACA,QAAA,KAAA,EAAA;AAAA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AAAA,KAAA,MACA;AACA;AACA,MAAA,UAAA,CAAA,KAAA,CAAA,QAAA;AACA;AACA,GANA;AAOA;;AAEA,EAAA,CAAA,EAAA,CAAA,YAAA,EAAA,UAAA,MAAA,EAAA;AACA,EAAA,OAAA,CAAA,GAAA,CAAA,gBAAA;AACA,EAAA,MAAA,CAAA,EAAA,CAAA,YAAA,EAAA,YAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,mBAAA;AACA,GAFA;AAGA,EAAA,MAAA,CAAA,EAAA,CAAA,UAAA,EAAA,UAAA,IAAA,EAAA;AACA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AACA,GAHA;AAIA,CATA","sourcesContent":["<template>\n  <div id=\"app\">\n    <img width=\"25%\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Hello Vue in CodeSandbox!\" />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld\";\n\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld\n  }\n};\nconsole.log(\"Running JavaScript!\");\n/**\n * Create HTTP server.\n */\n\nvar http = require('http');\nvar port = process.env.PORT || 3000;\napp.set('port', port);\nvar server = http.createServer(app);\nserver.listen(port);\n\n/**\n * Create IO connection\n */\nconsole.log(\"Running JavaScript!1\");\nvar io = require('socket.io').listen(server);\n\n\n/**\n * Create SerialPort connection\n */\nconsole.log(\"Running JavaScript!2\");\nvar SerialPort = require(\"serialport\").SerialPort\n\n// creates a new serial port connection, in this case to port COM5\n// Windows users: to find out which port is used, go to: Device Manager -> Ports (COM & LPT)\nvar serialPort = new SerialPort(\"COM5\", {\n\tbaudrate: 9600\n}, false); // this is the openImmediately flag [default is true]\n\n\nserialPort.open(function (error) {\n\tif ( error ) {\n\t\tconsole.log('failed to open: ' + error);\n\t} else {\n\t\tconsole.log('serial port opened');\n\t\tserialport_opened = true;\n\n\t\t// get data from connected device via serial port\n\t\tserialPort.on('data', function(data) {\n\t\t\t// get buffered data and parse it to an utf-8 string\n\t\t\tdata = data.toString('utf-8');\n\t\t\t// you could for example, send this data now to the the client via socket.io\n\t\t\t// io.emit('emit_data', data);\n\t\t});\n\n\t\tserialPort.on('error', function(data) {\n\t\t\tconsole.log('Error: ' + data);\n\t\t})\n\t}\n});\n\n// sends data to the connected device via serial port\nfunction writeAndDrain (data, callback) {\n\t// flush data received but not read\n\tserialPort.flush();\n\n\t// write/send data to serial port\n\tserialPort.write(data, function (error) {\n\t\tif(error){console.log(error);}\n\t\telse{\n\t\t\t// waits until all output data has been transmitted to the serial port.\n\t\t\tserialPort.drain(callback);      \n\t\t}\n\t});\n}\n\nio.on('connection', function (socket) {\n\tconsole.log('user connected');\n\tsocket.on('disconnect', function(){\n\t\tconsole.log('user disconnected');\n\t});\n\tsocket.on('get_data', function(data) {\n\t\t// send data to the connected device via serial port\n\t\twriteAndDrain(data, null);\n\t})\n});\n\n</script>\n\n<style>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"sourceRoot":"src"}]}