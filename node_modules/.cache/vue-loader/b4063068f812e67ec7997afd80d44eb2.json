{"remainingRequest":"/Users/noh/Learn/Vue/vue-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/noh/Learn/Vue/vue-template/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/noh/Learn/Vue/vue-template/src/App.vue","mtime":1564483313000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/noh/Learn/Vue/vue-template/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport HelloWorld from \"./components/HelloWorld\";\n\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld\n  }\n};\nconsole.log(\"Running JavaScript!\");\n/**\n * Create HTTP server.\n */\n\nvar http = require('http');\nvar port = process.env.PORT || 3000;\napp.set('port', port);\nvar server = http.createServer(app);\nserver.listen(port);\n\n/**\n * Create IO connection\n */\nconsole.log(\"Running JavaScript!1\");\nvar io = require('socket.io').listen(server);\n\n\n/**\n * Create SerialPort connection\n */\nconsole.log(\"Running JavaScript!2\");\nvar SerialPort = require(\"serialport\").SerialPort\n\n// creates a new serial port connection, in this case to port COM5\n// Windows users: to find out which port is used, go to: Device Manager -> Ports (COM & LPT)\nvar serialPort = new SerialPort(\"COM5\", {\n\tbaudrate: 9600\n}, false); // this is the openImmediately flag [default is true]\n\n\nserialPort.open(function (error) {\n\tif ( error ) {\n\t\tconsole.log('failed to open: ' + error);\n\t} else {\n\t\tconsole.log('serial port opened');\n\t\tserialport_opened = true;\n\n\t\t// get data from connected device via serial port\n\t\tserialPort.on('data', function(data) {\n\t\t\t// get buffered data and parse it to an utf-8 string\n\t\t\tdata = data.toString('utf-8');\n\t\t\t// you could for example, send this data now to the the client via socket.io\n\t\t\t// io.emit('emit_data', data);\n\t\t});\n\n\t\tserialPort.on('error', function(data) {\n\t\t\tconsole.log('Error: ' + data);\n\t\t})\n\t}\n});\n\n// sends data to the connected device via serial port\nfunction writeAndDrain (data, callback) {\n\t// flush data received but not read\n\tserialPort.flush();\n\n\t// write/send data to serial port\n\tserialPort.write(data, function (error) {\n\t\tif(error){console.log(error);}\n\t\telse{\n\t\t\t// waits until all output data has been transmitted to the serial port.\n\t\t\tserialPort.drain(callback);      \n\t\t}\n\t});\n}\n\nio.on('connection', function (socket) {\n\tconsole.log('user connected');\n\tsocket.on('disconnect', function(){\n\t\tconsole.log('user disconnected');\n\t});\n\tsocket.on('get_data', function(data) {\n\t\t// send data to the connected device via serial port\n\t\twriteAndDrain(data, null);\n\t})\n});\n\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <img width=\"25%\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Hello Vue in CodeSandbox!\" />\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld\";\n\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld\n  }\n};\nconsole.log(\"Running JavaScript!\");\n/**\n * Create HTTP server.\n */\n\nvar http = require('http');\nvar port = process.env.PORT || 3000;\napp.set('port', port);\nvar server = http.createServer(app);\nserver.listen(port);\n\n/**\n * Create IO connection\n */\nconsole.log(\"Running JavaScript!1\");\nvar io = require('socket.io').listen(server);\n\n\n/**\n * Create SerialPort connection\n */\nconsole.log(\"Running JavaScript!2\");\nvar SerialPort = require(\"serialport\").SerialPort\n\n// creates a new serial port connection, in this case to port COM5\n// Windows users: to find out which port is used, go to: Device Manager -> Ports (COM & LPT)\nvar serialPort = new SerialPort(\"COM5\", {\n\tbaudrate: 9600\n}, false); // this is the openImmediately flag [default is true]\n\n\nserialPort.open(function (error) {\n\tif ( error ) {\n\t\tconsole.log('failed to open: ' + error);\n\t} else {\n\t\tconsole.log('serial port opened');\n\t\tserialport_opened = true;\n\n\t\t// get data from connected device via serial port\n\t\tserialPort.on('data', function(data) {\n\t\t\t// get buffered data and parse it to an utf-8 string\n\t\t\tdata = data.toString('utf-8');\n\t\t\t// you could for example, send this data now to the the client via socket.io\n\t\t\t// io.emit('emit_data', data);\n\t\t});\n\n\t\tserialPort.on('error', function(data) {\n\t\t\tconsole.log('Error: ' + data);\n\t\t})\n\t}\n});\n\n// sends data to the connected device via serial port\nfunction writeAndDrain (data, callback) {\n\t// flush data received but not read\n\tserialPort.flush();\n\n\t// write/send data to serial port\n\tserialPort.write(data, function (error) {\n\t\tif(error){console.log(error);}\n\t\telse{\n\t\t\t// waits until all output data has been transmitted to the serial port.\n\t\t\tserialPort.drain(callback);      \n\t\t}\n\t});\n}\n\nio.on('connection', function (socket) {\n\tconsole.log('user connected');\n\tsocket.on('disconnect', function(){\n\t\tconsole.log('user disconnected');\n\t});\n\tsocket.on('get_data', function(data) {\n\t\t// send data to the connected device via serial port\n\t\twriteAndDrain(data, null);\n\t})\n});\n\n</script>\n\n<style>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]}]}